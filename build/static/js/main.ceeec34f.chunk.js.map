{"version":3,"sources":["Components/Container/TablePagination.js","Components/Table.js","Components/Header.js","Components/Game.js","Components/Individual.js","App.js","serviceWorker.js","index.js"],"names":["useStyles1","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","className","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","StyledTableCell","withStyles","head","backgroundColor","color","palette","common","white","body","fontSize","TableCell","useStyles2","table","minWidth","Component","React","memo","data","useState","setPage","setRowsPerPage","updateData","length","map","value","PVAParticipant","validatorAddress","uptime","games","gameName","gameResult","newGame","rows","arr","finalData","pvaUser","total","sort","a","b","createData","emptyRows","min","Container","maxWidth","TableContainer","component","Paper","Table","TableHead","TableRow","align","TableBody","slice","row","key","scope","style","width","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","label","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","target","ActionsComponent","Header","display","padding","src","maxHeight","diplay","position","left","top","Button","variant","to","game","updateGame","axios","get","newdata","useEffect","fetch","GameResult","GameName","Select","labelId","id","onChange","e","MenuItem","Validator","lazy","Individual","updateValue","collection","updateCollection","snackbar","viewSnackBar","fetchDataByPVA","status","handleClose","textAlign","flexDirection","TextField","Object","keys","fallback","Snackbar","open","autoHideDuration","onClose","Alert","severity","App","tableData","updateTableData","fetchData","path","default","Game","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ceeec34f.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles, useTheme, withStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nexport default TablePaginationActions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles, useTheme, withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport Container from \"@material-ui/core/Container\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePaginationActions from \"./Container/TablePagination\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#0a93eb\",\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nfunction createData(arr = []) {\n  const finalData = arr\n    .map((value) => {\n      const data = {\n        uptime: value.uptime,\n        newGame: value.newGame,\n        pvaUser: value.PVAParticipant,\n        total: value.uptime + value.newGame,\n      };\n      return data;\n    })\n    .sort((a, b) => (a.total < b.total ? 1 : -1));\n  return finalData;\n}\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\n\nconst Component = React.memo(function TableWrap({ data }) {\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(12);\n\n  let updateData = [];\n  if (data.length != 0) {\n    updateData = data.map((value) => {\n      const data = {\n        PVAParticipant: value.validatorAddress,\n        uptime:\n          value.games[0].gameName == \"uptime\"\n            ? value.games[0].gameResult\n            : value.games[1].gameResult,\n        newGame:\n          value.games[0].gameName == \"uptime\"\n            ? value.games[1].gameResult\n            : value.games[0].gameResult,\n      };\n      return data;\n    });\n  }\n\n  const rows = createData(updateData);\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"custom pagination table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>PVA User Address</StyledTableCell>\n              <StyledTableCell align=\"right\">Uptime</StyledTableCell>\n              <StyledTableCell align=\"right\">NewGame</StyledTableCell>\n              <StyledTableCell align=\"right\">Total</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(rowsPerPage > 0\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              : rows\n            ).map((row) => (\n              <TableRow key={row.pvaUser}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.pvaUser}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"right\">\n                  {row.uptime}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"right\">\n                  {row.newGame}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"right\">\n                  {row.total}\n                </TableCell>\n              </TableRow>\n            ))}\n\n            {emptyRows > 0 && (\n              <TableRow style={{ height: 53 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\n                colSpan={3}\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { \"aria-label\": \"rows per page\" },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n});\n\nexport default Component;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { Link } from \"@reach/router\";\n\nconst Header = () => {\n  return (\n    <>\n      <div\n        style={{\n          backgroundColor: \"#0a93eb\",\n          height: \"10vh\",\n          display: \"flex\",\n          padding: \"1vw\",\n        }}\n      >\n        <img\n          src=\"logo.svg\"\n          style={{\n            maxHeight: \"100%\",\n            diplay: \"block\",\n            position: \"relative\",\n            left: \"15%\",\n          }}\n        />\n        <div\n          style={{\n            maxHeight: \"100%\",\n            diplay: \"block\",\n            position: \"relative\",\n            left: \"55%\",\n            top: \"30%\",\n          }}\n        >\n          <Button variant=\"contained\" color=\"default\">\n            <Link to=\"/\">DashBoard</Link>\n          </Button>\n          <Button variant=\"contained\" color=\"default\">\n            <Link to=\"/individual\">Individual</Link>\n          </Button>\n          <Button variant=\"contained\" color=\"default\">\n            <Link to=\"/game\">Game</Link>\n          </Button>\n        </div>\n      </div>\n\n      <br />\n      <br />\n    </>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { makeStyles, useTheme, withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Container from \"@material-ui/core/Container\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePaginationActions from \"./Container/TablePagination\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#0a93eb\",\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nfunction createData(arr = []) {\n  const finalData = arr\n    .map((value) => {\n      const data = {\n        GameResult: value.gameResult,\n        GameName: value.gameName,\n        pvaUser: value.pvaUser,\n      };\n      return data;\n    })\n    .sort((a, b) => (a.GameResult < b.GameResult ? 1 : -1));\n  return finalData;\n}\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\n\nconst Component = React.memo(function TableWrap() {\n  const classes = useStyles2();\n  const [game, updateGame] = useState(\"uptime\");\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(12);\n  const [data, updateData] = React.useState([]);\n\n  async function fetch() {\n    const newdata = await axios.get(`/result/${game}`);\n    updateData(newdata);\n  }\n\n  useEffect(() => {\n    fetch();\n  }, [game]);\n\n  const rows = createData(data.data);\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChange = (e) => {\n    updateGame(e.target.value);\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <Select\n        labelId=\"demo-simple-select-outlined-label\"\n        id=\"demo-simple-select-outlined\"\n        value={game}\n        onChange={handleChange}\n        label=\"Game\"\n      >\n        <MenuItem value=\"uptime\">Uptime</MenuItem>\n        <MenuItem value=\"newgame\">NewGame</MenuItem>\n      </Select>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"custom pagination table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>PVA User Address</StyledTableCell>\n              <StyledTableCell align=\"right\">Game Score</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(rowsPerPage > 0\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              : rows\n            ).map((row) => (\n              <TableRow key={row.pvaUser}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.pvaUser}\n                </TableCell>\n\n                <TableCell style={{ width: 160 }} align=\"right\">\n                  {row.GameResult}\n                </TableCell>\n              </TableRow>\n            ))}\n\n            {emptyRows > 0 && (\n              <TableRow style={{ height: 53 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\n                colSpan={3}\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { \"aria-label\": \"rows per page\" },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n});\n\nexport default Component;\n","import React, { useState, Suspense } from \"react\";\nimport axios from \"axios\";\nimport { TextField, Button, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nconst Validator = React.lazy(() => import(\"./pvavalidator\"));\n\nexport default function Individual() {\n  const [value, updateValue] = useState(\"\");\n  const [collection, updateCollection] = useState({});\n  const [snackbar, viewSnackBar] = useState(false);\n  const fetchDataByPVA = async () => {\n    const data = await axios.get(`/pvauser/${value}/`);\n    if (data.status == 200) updateCollection(data.data);\n    else viewSnackBar(true);\n  };\n\n  const handleClose = () => {\n    viewSnackBar(false);\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          textAlign: \"center\",\n          display: \"flex\",\n          width: \"20vw\",\n          position: \"relative\",\n          left: \"40vw\",\n          flexDirection: \"column\",\n        }}\n      >\n        <TextField\n          id=\"outlined-basic\"\n          label=\"PVA Address\"\n          variant=\"outlined\"\n          value={value}\n          onChange={(e) => {\n            updateValue(e.target.value);\n          }}\n        />\n        <br />\n        <Button\n          variant=\"contained\"\n          color=\"#0a93eb\"\n          onClick={() => fetchDataByPVA()}\n        >\n          Search\n        </Button>\n      </div>\n      <br />\n      <br />\n      <br />\n      {Object.keys(collection).length != 0 && (\n        <Suspense fallback={<div>Loading...</div>}>\n          <Validator data={collection} />\n        </Suspense>\n      )}\n      <br />\n      <Snackbar open={snackbar} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          This is an error message!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n","import React, { useState, useEffect, Suspense } from \"react\";\nimport Table from \"./Components/Table\";\nimport axios from \"axios\";\nimport Header from \"./Components/Header\";\nimport Game from \"./Components/Game\";\nimport Individual from \"./Components/Individual\";\nimport { Router } from \"@reach/router\";\nimport \"./App.css\";\n\nfunction App() {\n  const [tableData, updateTableData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await axios.get(`/pvauser/getAll`);\n      updateTableData(data.data);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Router>\n        <Table data={tableData} path=\"/\" default={true} />\n        <Individual path=\"individual\" />\n        <Game path=\"/game\" />\n      </Router>\n      <br />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}